// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
import { pgTable, text, serial, jsonb, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});
var projects = pgTable("projects", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description").notNull(),
  image: text("image").notNull(),
  tags: jsonb("tags").$type().notNull(),
  demoUrl: text("demo_url"),
  githubUrl: text("github_url"),
  featured: boolean("featured").default(false)
});
var insertProjectSchema = createInsertSchema(projects).pick({
  title: true,
  description: true,
  image: true,
  tags: true,
  demoUrl: true,
  githubUrl: true,
  featured: true
});
var contacts = pgTable("contacts", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull(),
  subject: text("subject").notNull(),
  message: text("message").notNull(),
  createdAt: text("created_at").notNull()
});
var insertContactSchema = createInsertSchema(contacts).pick({
  name: true,
  email: true,
  subject: true,
  message: true
});

// server/routes.ts
import { z } from "zod";
var sampleProjects = [
  {
    id: 1,
    title: "Great North Finance Website",
    description: "Developed a responsive and engaging website that improved user engagement by 25%. Built lead generation tools to enhance customer acquisition and productivity, integrating APIs for seamless data management.",
    image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["JavaScript", "Svelte", "Firebase", "Lead Generation", "API Integration"],
    demoUrl: "",
    githubUrl: "https://github.com/zmarabeas",
    featured: true
  },
  {
    id: 2,
    title: "TextBlaster SMS Automation",
    description: "Developed a full-stack SMS automation app delivering mass text messaging capabilities for businesses. Integrated Twilio APIs for SMS dispatch, real-time analytics, and user management features with a user-friendly dashboard.",
    image: "https://images.unsplash.com/photo-1563986768609-322da13575f3?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["Node.js", "Svelte", "Firebase", "Twilio API", "Real-time Analytics"],
    demoUrl: "",
    githubUrl: "https://github.com/zmarabeas",
    featured: true
  },
  {
    id: 3,
    title: "Primo's Pizzeria POS System",
    description: "Designed and built a full-stack Point of Sale system tailored to a local pizzeria's needs. Integrated Heartland API for secure online payment processing and developed features such as menu interfaces and customer data management.",
    image: "https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["JavaScript", "Svelte", "MongoDB", "Heartland API", "Payment Processing"],
    demoUrl: "",
    githubUrl: "https://github.com/zmarabeas",
    featured: true
  },
  {
    id: 4,
    title: "Robotics Programming & Control Systems",
    description: "Guided teams through designing autonomous systems and controls for competitive robotics. Led programming workshops focused on autonomous systems using Arduino, CAN bus, and various control algorithms.",
    image: "https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["Arduino", "Python", "C", "CAN Bus", "Autonomous Systems", "Controls"],
    demoUrl: "",
    githubUrl: "https://github.com/zmarabeas",
    featured: false
  },
  {
    id: 5,
    title: "Educational Programming Workshops",
    description: "Led programming workshops and designed robotics projects at Schoolcraft College, improving students' grasp of STEM subjects. Delivered instruction in JavaScript, Python, and block-based programming for robotics courses.",
    image: "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["JavaScript", "Python", "Education", "Robotics", "STEM", "Workshop Design"],
    demoUrl: "",
    githubUrl: "https://github.com/zmarabeas",
    featured: false
  },
  {
    id: 6,
    title: "Budget Tracker",
    description: "A personal finance application for tracking income, expenses, and savings goals. Includes visualization of spending patterns and budget forecasts.",
    image: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["React", "Redux", "Firebase", "ChartJS"],
    demoUrl: "https://budget.example.com",
    githubUrl: "https://github.com/example/budget",
    featured: false
  },
  {
    id: 7,
    title: "Fitness Tracking App",
    description: "A comprehensive fitness tracking application for monitoring workouts, nutrition, and progress. Includes custom workout plans and achievement badges.",
    image: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["Angular", "TypeScript", "Firebase", "Health APIs"],
    demoUrl: "https://fitness.example.com",
    githubUrl: "https://github.com/example/fitness",
    featured: false
  },
  {
    id: 8,
    title: "Recipe Sharing Platform",
    description: "A community-driven recipe sharing platform with search, ratings, and user profiles. Features include dietary filters and cooking timers.",
    image: "https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-4.0.3&auto=format&fit=crop&w=1350&q=80",
    tags: ["React", "Node.js", "MongoDB", "AWS S3"],
    demoUrl: "https://recipes.example.com",
    githubUrl: "https://github.com/example/recipes",
    featured: true
  }
];
async function registerRoutes(app2) {
  app2.get("/api/projects", (_req, res) => {
    res.json(sampleProjects);
  });
  app2.get("/api/projects/:id", (req, res) => {
    const id = parseInt(req.params.id, 10);
    const project = sampleProjects.find((p) => p.id === id);
    if (!project) {
      return res.status(404).json({ message: "Project not found" });
    }
    res.json(project);
  });
  app2.post("/api/contact", async (req, res) => {
    try {
      const validatedData = insertContactSchema.parse(req.body);
      console.log("Contact form submission:", validatedData);
      res.status(200).json({ message: "Message sent successfully" });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.format() });
      }
      res.status(500).json({ message: "Server error" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use(express2.static("public"));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();